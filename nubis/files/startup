#!/bin/bash -l

exec &> >(tee >( ts > /var/log/startup.log)) 2>&1

if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
    echo "Enable Transparent Hugepages"
    echo always > /sys/kernel/mm/transparent_hugepage/enabled
fi

# Handling some swap
SWAP_SIZE_MEG=4196
SWAP_FILE=/var/swap

echo "Making $SWAP_SIZE_MEG Mb of swap in $SWAP_FILE"

dd if=/dev/zero of=$SWAP_FILE bs="1M" count="$SWAP_SIZE_MEG"
chmod 600 $SWAP_FILE
mkswap $SWAP_FILE
swapon $SWAP_FILE

# Bootstrap content of variables (XXX: Dynamic password)
cat <<EOF > /home/dbadmin/autoscale/autoscaling_vars.sh
PATH="\$PATH:/opt/vertica/bin"
export PATH

database_name="nubis"
password="nubis"
# For autoscaling between 1 and 3 nodes, set k_safety to 0 (not recommended!)
k_safety=0                                             
EOF

echo "Managing SSH key"

mkdir -p /home/dbadmin/.ssh
chmod 700 /home/dbadmin/.ssh

# For automation
nubis-secret get $(nubis-metadata NUBIS_ENVIRONMENT)/ssh/secret-key > /home/dbadmin/autoscale/key.pem
nubis-secret get $(nubis-metadata NUBIS_ENVIRONMENT)/ssh/secret-key > /home/dbadmin/.ssh/id_rsa

nubis-secret get $(nubis-metadata NUBIS_ENVIRONMENT)/ssh/public-key > /home/dbadmin/.ssh/id_rsa.pub
nubis-secret get $(nubis-metadata NUBIS_ENVIRONMENT)/ssh/public-key > /home/dbadmin/.ssh/authorized_keys
nubis-secret get $(nubis-metadata NUBIS_ENVIRONMENT)/ssh/public-key > /home/dbadmin/autoscale/srcClusterKey.pub

# Fix ownership
chown -R dbadmin:verticadba /home/dbadmin

# Fix permissions
chmod 600 /home/dbadmin/autoscale/key.pem
chmod 600 /home/dbadmin/.ssh/*

chmod 755 /home/dbadmin/autoscale/*.sh*
chmod 6775 /home/dbadmin/autoscale/{add,remove}_nodes.sh

# Install our private RPMs
RPM_BUCKET=$(aws s3 ls | grep $(nubis-metadata NUBIS_PROJECT)-$(nubis-metadata NUBIS_ENVIRONMENT)-rpms | awk '{print $3}' | head -n1)

if [ "$RPM_BUCKET" != "" ]; then
  aws s3 sync s3://$RPM_BUCKET/ /tmp/rpms/
  
  echo "Installing private RPMS"
  
  yum localinstall -y /tmp/rpms/*.rpm
fi

# Fix SSH batchmode option
cat /opt/vertica/config/admintools.conf
perl -pi -e's/BatchMode=no/BatchMode=yes/g' /opt/vertica/config/admintools.conf
cat /opt/vertica/config/admintools.conf

#Only bootstrap once and only once
/usr/local/bin/vertical-bootstrap

# If we haven't perfomed the boostrap process, we are a slave, so join
if [ ! -f "/var/run/$(nubis-metadata NUBIS_PROJECT)-bootstrapped" ]; then
  # This will make us join the cluster, possibly waiting for the master to finish bootstrapping
  /home/dbadmin/autoscale/launch.sh.template
fi

# Stop the MC console on all but one node somehow
