#!/bin/bash -l

exec &> >(tee >( ts > /var/log/vertical-startup.log)) 2>&1

NUBIS_PROJECT=$(nubis-metadata NUBIS_PROJECT)
NUBIS_ENVIRONMENT=$(nubis-metadata NUBIS_ENVIRONMENT)
AWS_REGION=$(nubis-region)
KV_PREFIX="$NUBIS_PROJECT-$NUBIS_ENVIRONMENT/$NUBIS_ENVIRONMENT/config"

export PATH=/usr/local/bin:$PATH

if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
    echo "Enable Transparent Hugepages"
    echo always > /sys/kernel/mm/transparent_hugepage/enabled
fi

if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
    echo "Disable Defrag"
    echo never > /sys/kernel/mm/transparent_hugepage/defrag
fi

# Do we have a dedicated data disk ?
if file -s /dev/xvdf; then

  # Prepare data disk
  DATA_DEVICE=/dev/xvdf
  DATA_PATH=/vertica

  echo "Mounting $DATA_DEVICE on $DATA_PATH"

  # Is it blank ?
  if ! tune2fs -l "$DATA_DEVICE" ; then
    echo "Making New filesystem on $DATA_DEVICE"
    mkfs.ext4 -L vertica "$DATA_DEVICE"
  fi

  # make sure our target mountpoint exists
  mkdir -p "$DATA_PATH"
  chown root:root "$DATA_PATH"

  # Mount the device
  echo "Mounting $DATA_DEVICE on $DATA_PATH"
  mount "$DATA_DEVICE" "$DATA_PATH"

  # Ensure data directory is present
  if [ ! -d "$DATA_PATH/data" ]; then
    mkdir "$DATA_PATH/data"
  fi

  # Ensure correct permissions
  chown -R dbadmin:verticadba "$DATA_PATH/data"
else
  # Use our root volume for data
  DATA_DEVICE=$(findmnt -n -o SOURCE /)
fi

READ_AHEAD_MINIMUM=2048
READ_AHEAD=$(/sbin/blockdev --getra "$DATA_DEVICE")

if [ "$READ_AHEAD" -lt "$READ_AHEAD_MINIMUM" ]; then
    echo "Increase readhead size to $READ_AHEAD_MINIMUM"
    /sbin/blockdev --setra "$READ_AHEAD_MINIMUM" "$DATA_DEVICE"
fi

SQS_URL=$(consulate kv get "$KV_PREFIX/AutoScaling/SQS")
LIFECYCLE_HOOK_NAME=$(consulate kv get "$KV_PREFIX/AutoScaling/LifeCycleHookName")
K_SAFETY=$(consul kv get "$KV_PREFIX/k_safety" 2>/dev/null || echo "1" )
ADMIN_PASSWORD=$(consul kv get "$KV_PREFIX/AdminPassword" 2>/dev/null || echo "nubis" )

# Bootstrap content of variables (XXX: Dynamic password)
cat <<EOF > /home/dbadmin/autoscale/autoscaling_vars.sh
PATH="\$PATH:/opt/vertica/bin"
export PATH

AWS_DEFAULT_REGION="$AWS_REGION"
export AWS_DEFAULT_REGION

database_name="metrics"
password="$ADMIN_PASSWORD"
# For autoscaling between 1 and 3 nodes, set k_safety to 0 (not recommended!)
k_safety=$K_SAFETY

replace_down_node_after=10
scaleDown_url=$SQS_URL
lifecycle_hook_name=$LIFECYCLE_HOOK_NAME
EOF

# Show our values
cat /home/dbadmin/autoscale/autoscaling_vars.sh

echo "Managing SSH key"

mkdir -p /home/dbadmin/.ssh
chmod 700 /home/dbadmin/.ssh

# For automation

consulate kv get "$KV_PREFIX/ssh/secret-key" > /home/dbadmin/autoscale/key.pem
consulate kv get "$KV_PREFIX/ssh/secret-key" > /home/dbadmin/.ssh/id_rsa

consulate kv get "$KV_PREFIX/ssh/public-key" > /home/dbadmin/.ssh/id_rsa.pub
consulate kv get "$KV_PREFIX/ssh/public-key" > /home/dbadmin/.ssh/authorized_keys
consulate kv get "$KV_PREFIX/ssh/public-key" > /home/dbadmin/autoscale/srcClusterKey.pub

# For SSL

mkdir -p /home/dbadmin/.vsql
chmod 700 /home/dbadmin/.vsql

consulate kv get "$KV_PREFIX/SSL/Certificate" > /home/dbadmin/autoscale/server.crt
consulate kv get "$KV_PREFIX/SSL/Certificate" > /home/dbadmin/.vsql/root.crt
consulate kv get "$KV_PREFIX/SSL/Key" > /home/dbadmin/autoscale/server.key

# Fix ownership
chown -R dbadmin:verticadba /home/dbadmin

# Disable DUO for this user, yuck
echo 'groups = *,!verticadba' >> /etc/confd/templates/duo.tmpl

# Fix permissions
chmod 600 /home/dbadmin/autoscale/key.pem
chmod 600 /home/dbadmin/.ssh/*

chmod 755 /home/dbadmin/autoscale/*.sh*
chmod 6775 /home/dbadmin/autoscale/{add,remove}_nodes.sh

# Set TZ
echo 'TZ=UTC' >> /home/dbadmin/.bash_profile
echo 'export TZ' >> /home/dbadmin/.bash_profile

# Install our private RPMs
RPM_BUCKET=$(consulate kv get "$KV_PREFIX/S3/Bucket/RPMS")

if [ "$RPM_BUCKET" != "" ]; then
  aws s3 sync "s3://$RPM_BUCKET/" /tmp/rpms/
  
  echo "Installing private RPMS"
  
  yum localinstall -y /tmp/rpms/*.rpm

  if [ -r "/tmp/rpms/license.dat" ]; then
    echo "Installing license"
    cp /tmp/rpms/license.dat /home/dbadmin/autoscale/license.dat
    chown dbadmin /home/dbadmin/autoscale/license.dat
    chmod 600 /home/dbadmin/autoscale/license.dat
  fi

  rm -rf /tmp/rpms
fi

# Attach our volume if we can
#aws --region us-west-2 ec2 describe-volumes --filters "Name=tag-key,Values=Purpose,Name=tag-value,Values=database" "Name=tag-key,Values=Arena,Name=tag-value,Values=core" #"Name=tag-key,Values=Environment,Name=tag-value,Values=stage"  "Name=tag-key,Values=Project,Name=tag-value,Values=vertical" #"Name=tag-key,Values=AvailabilityZone,Name=tag-value,Values=us-west-2a"

#Only bootstrap once and only once
/usr/local/bin/vertical-bootstrap

# Fix SSH batchmode option
perl -pi -e's/BatchMode=yes/BatchMode=no/g' /opt/vertica/config/admintools.conf /opt/vertica/bin/vbr.py

#We did not bootstrap, so join normally
if [ ! -f "/var/run/$(nubis-metadata NUBIS_PROJECT)-bootstrapped" ]; then
  # This will make us join the cluster, possibly waiting for the master to finish bootstrapping
  /home/dbadmin/autoscale/launch.sh.template
fi

# Fix SSH batchmode option, again
perl -pi -e's/BatchMode=yes/BatchMode=no/g' /opt/vertica/config/admintools.conf /opt/vertica/bin/vbr.py

# Possibly install/update user-defined function
/usr/local/sbin/nubis-vertica-install-user-defined-functions
